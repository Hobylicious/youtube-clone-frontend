This this the link to the youtube API

https://developers.google.com/youtube/v3/docs/search/list?apix_params=%7B%22part%22%3A%5B%22snippet%22%5D%2C%22maxResults%22%3A1000000000%2C%22order%22%3A%22date%22%2C%22safeSearch%22%3A%22moderate%22%2C%22videoType%22%3A%22any%22%7D&apix=true


I got the second API from here

https://developers.google.com/youtube/v3/getting-started#quota


To change quotas

https://console.cloud.google.com/iam-admin/quotas?project=my-project-244934&pageState=(%22allQuotasTable%22:(%22p%22:1))

RAPID API
https://rapidapi.com/hub


export default function VideoWindow({ videoId, videoLink, videoStat }) {

	//  Declare a place holder for the video before loading a new outline
	const [video, setVideo] = useState(`https://www.youtube.com/watch?v=wM7zqDG5Iws`)

	const url = `https://www.youtube.com/watch?v=${videoId}`

	setVideo(url)

	// console.log(video)
	return (
		// <div className='video-window'
		<div>
			<ReactPlayer url={url} />
		</div>

	)
}



Request another API key

https://console.cloud.google.com/apis/library/youtube.googleapis.com?project=project4&organizationId=0

or

https://console.cloud.google.com/cloud-resource-manager?previousPage=%2Fapis%2Flibrary%2Fyoutube.googleapis.com%3Fproject%3Dproject4%26organizationId%3D0&organizationId=0





             <li className="item" key={index}>
			                                          <div>
			                                              <b>
											    <a href= `https://www.youtube.com/watch_popup?v=${videoId[index].id.videoId}`>{videoId[index].snippet.title}</a></b>
			                                              <p>{videoId[index].snippet.description}</p>
			                                        </div>
			                                         <ul className="meta">
			                                             <li>By: <a href=`https://www.youtube.com/channel/${videoId[index].snippet.channelId}`>{videoId[index].snippet.title}</a>
								</li>





										<div>

				<ul className="items">
					{videoLink.data.items.map((video, index) => (

						(

<li className="item" key={index}>
							
							<div>
								<b>
									<a href=``
									</b>
							
								<p>{video.snippet.title}</p>
							
							</div>
						
							<ul className="meta">
								<li>By: <a href=`https://www.youtube.com/channel/${video.snippet.channelId}`>{video.snippet.channelTitle}</a></li>
								<li>Views: {videoStatistics.statics.viewCount}</li>
								<li>Favorites: {videoStatistics.statics.viewCount}</li>
								<li>Duration: {videoStatistics.statics.favoritesCount}</li>
								<li>Likes: {videoStatistics.statics.likeCount}</li>
								<li>Uploaded: `${videoStatistics.uploadedAt.substring(5,7)}/${videoStatistics.uploadedAt.substring(8,10)}/${videoStatistics.uploadedAt.substring(0,4)}`</li>
							</ul>

				<img alt="" href=`https://www.youtube.com/watch_popup?v=${${
					videoId[index].id.videoId` src={videoStatistics.snippet.thumbnails.url} height="75" />
						
						</li>

				</ul>
				
			</div >	








			< div className="videosContainer" >
					{
						videoLink.data.items.map((video, index) => (
							< div key={index} >
								<img className='single-card' src={video.snippet.thumbnails.default.url} alt='images' width="120" height="90" onClick={() => { document.getElementsByTagName('iframe')[0].src = `https://www.youtube.com/watch_popup?v=${videoId[index].id.videoId}` }} />
							</div>
						))
					}
				</ div>




				<div>
				<ul className="items">
					{videoLink.data.items.map((video, index) => (
						<li className="item" key={index}>
							<div>
								<b>
									<a >{video.snippet.title}</a>
								</b>
								<p>{video.snippet.title}</p>
							</div>
							<ul className="meta">
								<li>By: <a href=`https://www.youtube.com/channel/${video.snippet.channelId}`>{video.snippet.channelTitle}</a></li>
								<li>Views: {videoStatistics.statics.viewCount}</li>
								<li>Favorites: {videoStatistics.statics.viewCount}</li>
								<li>Duration: {videoStatistics.statics.favoritesCount}</li>
								<li>Likes: {videoStatistics.statics.likeCount}</li>
								<li>Uploaded: `${videoStatistics.uploadedAt.substring(5,7)}/${videoStatistics.uploadedAt.substring(8,10)}/${videoStatistics.uploadedAt.substring(0,4)}`</li>
							</ul>
							<img alt="" href=`https://www.youtube.com/watch_popup?v=${${videoId[index].id.videoId` src={videoStatistics.snippet.thumbnails} height="75" />
						</li>
					))}
				</ul>
				
				
			</div>





			{/* videoLink.data.items &&
				(videoLink.data.items.length === 0
				? <p>No results</p>
				: (
				<ul className="items">
					{videoLink.data.items.map((video, index) => (
						<li className="item" key={index}>
							<div>
								<b><a href=`https://www.youtube.com/watch_popup?v=${videoId[index].id.videoId}`>{video.snippet.title}</a></b>
								<p>{video.snippet.title}</p>
							</div>
							<ul className="meta">
								<li>By: <a href=`https://www.youtube.com/channel/${video.snippet.channelId}`>{video.snippet.channelTitle}</a></li>
								<li>Views: {videoStatistics.statics.viewCount}</li>
								<li>Favorites: {videoStatistics.statics.viewCount}</li>
								<li>Duration: {videoStatistics.statics.favoritesCount}</li>
								<li>Likes: {videoStatistics.statics.likeCount}</li>
								<li>Uploaded: `${videoStatistics.uploadedAt.substring(5,7)}/${videoStatistics.uploadedAt.substring(8,10)}/${videoStatistics.uploadedAt.substring(0,4)}`</li>
							</ul>
							<img alt="" href=`https://www.youtube.com/watch_popup?v=${${videoId[index].id.videoId` src={videoStatistics.snippet.thumbnails} height="75" />
						</li>
					))}
				</ul>
				)
				) */}





				// Provide the searched string to the yotube API.
    async function getSearchedData(searchedString) {

        // This API is responsible for getting the video's id that we will use in the second API statstical information about the video.
        let urlVideoId = `${apiVideoId.api}${searchedString}&key=${apiVideoId.key}`;

        await axios.get(urlVideoId)
            .then((data) => {
                // console.log(data);
                setVideoLink(data)
                // console.log(data.data.items[0].id.videoId.length);
                // setSearchedObject(data)

                // Check if the result fron the first API is not empty.
                if (data) {

                    setVideoId(data.data.items)

                    const arrayStatistics = [];
                    const arrayViews = [];
                    const arrayLikes = [];

                    data.data.items.forEach((item) => {

                        // console.log(item)

                        let urlVideoStat = `${apiVideoStat.api}${item.id.videoId}&key=${apiVideoId.key}&part=snippet,statistics&fields=items(id,snippet,statistics)`

                        axios.get(urlVideoStat)
                            .then((result) => {
                                // console.log(result)

                            

                                // if(result.data.items.length > 0){
                                    // arrayStatistics.push(result.data);
                                // }

                                console.log(arrayStatistics)
                                // arrayLikes.push(result.data.items[0].statistics.likeCount)
                                // arrayViews.push(result.data.items[0].statistics.viewCount)
                            })

                    })
                    // The API below gets us statistical information.

                
                    setVideoStat(arrayStatistics)


                }

                else {
                    console.log('No reesult')
                }

            });
    }





{/* <p onClick={() => { document.getElementsByTagName('iframe')[0].src = `https://www.youtube.com/watch_popup?v=${videoId[index].id.videoId}` }}>Views: {viewsNum(videoStat.items[index].statistics.viewCount)}</p>
								<p onClick={() => { document.getElementsByTagName('iframe')[0].src = `https://www.youtube.com/watch_popup?v=${videoId[index].id.videoId}` }}>Favorites: {viewsNum(videoStat.items[index].statistics.favoriteCount)}</p>
								<p onClick={() => { document.getElementsByTagName('iframe')[0].src = `https://www.youtube.com/watch_popup?v=${videoId[index].id.videoId}` }}>Likes: {viewsNum(videoStat.items[index].statistics.likeCount)}</p>
								<p onClick={() => { document.getElementsByTagName('iframe')[0].src = `https://www.youtube.com/watch_popup?v=${videoId[index].id.videoId}` }}>Uploaded at: {videoStat.items[index].snippet.publishedAt.subString(5, 7)}/{videoStat.items[index].snippet.publishedAt.subString(8, 10)}/{videoStat.items[index].snippet.publishedAt.subString(0, 4)} {videoStat.items[index].snippet.publishedAt.subString(11, 13)}:{videoStat.items[index].snippet.publishedAt.subString(14, 16)}</p> */}